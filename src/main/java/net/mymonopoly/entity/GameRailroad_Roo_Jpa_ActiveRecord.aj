// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.mymonopoly.entity;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import net.mymonopoly.entity.GameRailroad;
import org.springframework.transaction.annotation.Transactional;

privileged aspect GameRailroad_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager GameRailroad.entityManager;
    
    public static final EntityManager GameRailroad.entityManager() {
        EntityManager em = new GameRailroad().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long GameRailroad.countGameRailroads() {
        return entityManager().createQuery("SELECT COUNT(o) FROM GameRailroad o", Long.class).getSingleResult();
    }
    
    public static List<GameRailroad> GameRailroad.findAllGameRailroads() {
        return entityManager().createQuery("SELECT o FROM GameRailroad o", GameRailroad.class).getResultList();
    }
    
    public static GameRailroad GameRailroad.findGameRailroad(Long id) {
        if (id == null) return null;
        return entityManager().find(GameRailroad.class, id);
    }
    
    public static List<GameRailroad> GameRailroad.findGameRailroadEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM GameRailroad o", GameRailroad.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void GameRailroad.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void GameRailroad.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            GameRailroad attached = GameRailroad.findGameRailroad(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void GameRailroad.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void GameRailroad.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public GameRailroad GameRailroad.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        GameRailroad merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
