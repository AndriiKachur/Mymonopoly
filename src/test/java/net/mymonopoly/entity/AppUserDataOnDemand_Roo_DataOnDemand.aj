// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.mymonopoly.entity;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.mymonopoly.entity.AppUser;
import net.mymonopoly.entity.AppUserDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect AppUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppUserDataOnDemand: @Component;
    
    private Random AppUserDataOnDemand.rnd = new SecureRandom();
    
    private List<AppUser> AppUserDataOnDemand.data;
    
    public AppUser AppUserDataOnDemand.getNewTransientAppUser(int index) {
        AppUser obj = new AppUser();
        setActivationCode(obj, index);
        setActivationDate(obj, index);
        setEmail(obj, index);
        setEnabled(obj, index);
        setLocked(obj, index);
        setName(obj, index);
        setNickname(obj, index);
        setPassword(obj, index);
        setSurname(obj, index);
        return obj;
    }
    
    public void AppUserDataOnDemand.setActivationCode(AppUser obj, int index) {
        String activationCode = "activationCode_" + index;
        obj.setActivationCode(activationCode);
    }
    
    public void AppUserDataOnDemand.setActivationDate(AppUser obj, int index) {
        Date activationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setActivationDate(activationDate);
    }
    
    public void AppUserDataOnDemand.setEmail(AppUser obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void AppUserDataOnDemand.setEnabled(AppUser obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void AppUserDataOnDemand.setLocked(AppUser obj, int index) {
        Boolean locked = Boolean.TRUE;
        obj.setLocked(locked);
    }
    
    public void AppUserDataOnDemand.setName(AppUser obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void AppUserDataOnDemand.setNickname(AppUser obj, int index) {
        String nickname = "nickname_" + index;
        obj.setNickname(nickname);
    }
    
    public void AppUserDataOnDemand.setPassword(AppUser obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void AppUserDataOnDemand.setSurname(AppUser obj, int index) {
        String surname = "surname_" + index;
        obj.setSurname(surname);
    }
    
    public AppUser AppUserDataOnDemand.getSpecificAppUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppUser obj = data.get(index);
        Long id = obj.getId();
        return AppUser.findAppUser(id);
    }
    
    public AppUser AppUserDataOnDemand.getRandomAppUser() {
        init();
        AppUser obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AppUser.findAppUser(id);
    }
    
    public boolean AppUserDataOnDemand.modifyAppUser(AppUser obj) {
        return false;
    }
    
    public void AppUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AppUser.findAppUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AppUser>();
        for (int i = 0; i < 10; i++) {
            AppUser obj = getNewTransientAppUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
