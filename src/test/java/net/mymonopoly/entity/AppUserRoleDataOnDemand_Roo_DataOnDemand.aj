// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.mymonopoly.entity;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.mymonopoly.entity.AppRole;
import net.mymonopoly.entity.AppRoleDataOnDemand;
import net.mymonopoly.entity.AppUser;
import net.mymonopoly.entity.AppUserDataOnDemand;
import net.mymonopoly.entity.AppUserRole;
import net.mymonopoly.entity.AppUserRoleDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AppUserRoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppUserRoleDataOnDemand: @Component;
    
    private Random AppUserRoleDataOnDemand.rnd = new SecureRandom();
    
    private List<AppUserRole> AppUserRoleDataOnDemand.data;
    
    @Autowired
    AppRoleDataOnDemand AppUserRoleDataOnDemand.appRoleDataOnDemand;
    
    @Autowired
    AppUserDataOnDemand AppUserRoleDataOnDemand.appUserDataOnDemand;
    
    public AppUserRole AppUserRoleDataOnDemand.getNewTransientAppUserRole(int index) {
        AppUserRole obj = new AppUserRole();
        setApprole(obj, index);
        setAppuser(obj, index);
        return obj;
    }
    
    public void AppUserRoleDataOnDemand.setApprole(AppUserRole obj, int index) {
        AppRole approle = appRoleDataOnDemand.getRandomAppRole();
        obj.setApprole(approle);
    }
    
    public void AppUserRoleDataOnDemand.setAppuser(AppUserRole obj, int index) {
        AppUser appuser = appUserDataOnDemand.getRandomAppUser();
        obj.setAppuser(appuser);
    }
    
    public AppUserRole AppUserRoleDataOnDemand.getSpecificAppUserRole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppUserRole obj = data.get(index);
        Long id = obj.getId();
        return AppUserRole.findAppUserRole(id);
    }
    
    public AppUserRole AppUserRoleDataOnDemand.getRandomAppUserRole() {
        init();
        AppUserRole obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AppUserRole.findAppUserRole(id);
    }
    
    public boolean AppUserRoleDataOnDemand.modifyAppUserRole(AppUserRole obj) {
        return false;
    }
    
    public void AppUserRoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AppUserRole.findAppUserRoleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppUserRole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AppUserRole>();
        for (int i = 0; i < 10; i++) {
            AppUserRole obj = getNewTransientAppUserRole(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
